use crate::lexer::{Token, LexicalError};
use crate::ast::ast;
use std::str::FromStr;

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        // 기호
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "," => Token::Comma,
        "..=" => Token::RangeInclusive,
        ".." => Token::Range,
        "=" => Token::Eq,
        ";" => Token::Semicolon,
        "!" => Token::Bang,
        "*" => Token::Star,
        "/" => Token::Slash,
        "+" => Token::Plus,
        "-" => Token::Minus,
        ":" => Token::Colon,
        "->" => Token::Arrow,
        // 비교연산자
        "==" => Token::EqEq,
        "!=" => Token::NotEq,
        "<" => Token::Lt,
        "<=" => Token::LtEq,
        ">" => Token::Gt,
        ">=" => Token::GtEq,
        // 키워드
        "let" => Token::Let,
        "const" => Token::Const,
        "static" => Token::Static,
        "fn" => Token::Fn,
        "if" => Token::If,
        "else" => Token::Else,
        "elif" => Token::ElseIf,
        "match" => Token::Match,
        "while" => Token::While,
        "for" => Token::For,
        "in" => Token::In,
        "pub" => Token::Pub,
        "return" => Token::Return,
        "true" => Token::True,
        "false" => Token::False,

        "identifier" => Token::Identifier(<String>),
        "int" => Token::IntegerLiteral(<i64>),
        "float" => Token::FloatLiteral(<f64>),
        "string" => Token::StringLiteral(<String>),
    }
}

pub KitsuneScript: Vec<ast::Statement> = {
    <stmts:Statement*> => stmts
}

pub Statement: ast::Statement = {
    // 변수 선언
    "let" <name:"identifier"> "=" <value:Expression> ";" => {
        ast::Statement::Let { name, value }
    },
    "const" <name:"identifier"> "=" <value:Expression> ";" => {
            ast::Statement::Const {visibility: ast::Visibility::Private, name, value }
    },
    "pub" "const" <name:"identifier"> "=" <value:Expression> ";" => {
            ast::Statement::Const {visibility: ast::Visibility::Public, name, value }
    },
    "static" <name:"identifier"> "=" <value:Expression> ";" => {
            ast::Statement::Static {visibility: ast::Visibility::Private, name, value }
    },
    "pub" "static" <name:"identifier"> "=" <value:Expression> ";" => {
            ast::Statement::Static {visibility: ast::Visibility::Public, name, value }
    },

    // private (기본) 함수 선언
    "fn" <name:"identifier"> "(" <params:ParamList?> ")" <ret_type:ReturnType?> <body:Block> => {
        ast::Statement::Function {
            visibility: ast::Visibility::Private,
            name,
            params: params.unwrap_or_default(),
            return_type: ret_type,
            body,
        }
    },
    // public 함수 선언
    "pub" "fn" <name:"identifier"> "(" <params:ParamList?> ")" <ret_type:ReturnType?> <body:Block> => {
        ast::Statement::Function {
            visibility: ast::Visibility::Public,
            name,
            params: params.unwrap_or_default(),
            return_type: ret_type,
            body,
        }
    },
    // for 문
    "for" <var_name:"identifier"> "in" <iterable:Expression> <body:Block> => {
        ast::Statement::For {
            var_name,
            iterable,
            body,
        }
    },
    // while 문
    "while" <condition:Expression> <body:Block> => {
        ast::Statement::While {
            condition,
            body,
        }
    },
    // return 문
    "return" <expr:Expression?> ";" => {
        ast::Statement::Return(expr)
    },
    // 표현식 문
    <expr:Expression> ";" => {
        ast::Statement::Expression(expr)
    },
}

pub Block: ast::Block = {
    "{" <stmts:Statement*> "}" => {
        ast::Block { statements: stmts }
    }
}

pub ParamList: Vec<ast::Parameter> = {
    <param:Parameter> => vec![param],
    <mut params:ParamList> "," <param:Parameter> => {
        params.push(param);
        params
    },
}

pub Parameter: ast::Parameter = {
    <name:"identifier"> <param_type:(":" <"identifier">)?> => {
        ast::Parameter {
            name,
            param_type,
        }
    }
}

pub ReturnType: String = {
    "->" <ty:"identifier"> => ty
}

pub Expression: Box<ast::Expression> = {
    <range:RangeExpr> => range,
};
// 제일 낮은 우선순위
pub RangeExpr: Box<ast::Expression> = {
    <start:AdditiveExpr> "..=" <end:AdditiveExpr> => Box::new(ast::Expression::Range {
        start,
        end,
        inclusive: true,
    }),
    <start:AdditiveExpr> ".." <end:AdditiveExpr> => Box::new(ast::Expression::Range {
        start,
        end,
        inclusive: false,
    }),
    <comp:ComparisonExpr> => comp,
};
// 그 다음 우선순위 (1)
pub ComparisonExpr: Box<ast::Expression> = {
    <lhs:ComparisonExpr> "==" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Eq,
        rhs,
    }),
    <lhs:ComparisonExpr> "!=" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::NotEq,
        rhs,
    }),
    <lhs:ComparisonExpr> "<" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Lt,
        rhs,
    }),
    <lhs:ComparisonExpr> "<=" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::LtEq,
        rhs,
    }),
    <lhs:ComparisonExpr> ">" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Gt,
        rhs,
    }),
    <lhs:ComparisonExpr> ">=" <rhs:AdditiveExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::GtEq,
        rhs,
    }),
    <add:AdditiveExpr> => add,
};
// 그 다음 우선순위 (2)
pub AdditiveExpr: Box<ast::Expression> = {
    <lhs:AdditiveExpr> "+" <rhs:MultiplicativeExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Add,
        rhs,
    }),
    <lhs:AdditiveExpr> "-" <rhs:MultiplicativeExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Sub,
        rhs,
    }),
    <mul:MultiplicativeExpr> => mul,
};
// 그 다음 우선순위 (2)
pub MultiplicativeExpr: Box<ast::Expression> = {
    <lhs:MultiplicativeExpr> "*" <rhs:UnaryExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Mul,
        rhs,
    }),
    <lhs:MultiplicativeExpr> "/" <rhs:UnaryExpr> => Box::new(ast::Expression::BinaryOperation {
        lhs,
        operator: ast::Operator::Div,
        rhs,
    }),
    <unary:UnaryExpr> => unary,
};
// 그 다음 우선순위 (3)
pub UnaryExpr: Box<ast::Expression> = {
    "-" <expr:UnaryExpr> => Box::new(ast::Expression::UnaryOperation {
        operator: ast::UnaryOperator::Neg,
        expr,
    }),
    "+" <expr:UnaryExpr> => Box::new(ast::Expression::UnaryOperation {
        operator: ast::UnaryOperator::Pos,
        expr,
    }),
    "!" <expr:UnaryExpr> => Box::new(ast::Expression::UnaryOperation {
        operator: ast::UnaryOperator::Not,
        expr,
    }),
    <term:Term> => term,
};
// 그 다음 우선순위
pub Term: Box<ast::Expression> = {
    <val:"int"> => {
        Box::new(ast::Expression::Integer(val))
    },
    <val:"float"> => {
        Box::new(ast::Expression::Float(val))
    },
    <val:"string"> => {
        Box::new(ast::Expression::String(val))
    },
    "true" => {
        Box::new(ast::Expression::Boolean(true))
    },
    "false" => {
        Box::new(ast::Expression::Boolean(false))
    },
    // 함수 호출
    <name:"identifier"> "(" <args:ArgList?> ")" => {
        Box::new(ast::Expression::FunctionCall {
            name,
            args: args.unwrap_or_default(),
        })
    },

    // 변수
    <name:"identifier"> => {
        Box::new(ast::Expression::Variable(name))
    },
    "(" <Expression> ")",
    // 블록 표현식
    <block:Block> => {
        Box::new(ast::Expression::Block(block))
    },
}

pub ArgList: Vec<Box<ast::Expression>> = {
    <expr:Expression> => vec![expr],
    <mut args:ArgList> "," <expr:Expression> => {
        args.push(expr);
        args
    },
}